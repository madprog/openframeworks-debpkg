libsvgtiny (0.1.7) stable; urgency=medium

  - Fix various bugs which caused ASAN and UBSAN to be upset
  - Ensure we report failures better
  - Ignore the autogenerated colours file

 -- Vincent Sanders <vince@kyllikki.org>  Tue, 28 Aug 2018 11:18:37 +0100

libsvgtiny (0.1.6) stable; urgency=medium

  - Fix parsing of multiple vertical lineto commands
       Thanks to Nils for spotting this.
  - Buildsystem: OpenBSD `sed` doesn't handle -i option.
  - Buildsystem: Squash "no previous declaration for 'svgtiny_color_lookup'"
  - Build: Include gperf-generated code directly.
       Previously we built the generated code separatly and then linked to
       it.  However, this caused problems with certain compilers and gperf
       versions.  This change includes the generated code directly in
       svgtiny.c instead, which is the only place its used.

 -- Vincent Sanders <vince@kyllikki.org>  Fri, 13 Oct 2017 10:00:16 +0100

libsvgtiny (0.1.5) stable; urgency=medium

  - Test data: Move file to correct place.
  - Test data: Add SVG with missing stroke gradient definition.
  - Parse: Ensure consumed characters count is initiliased.
  - Parse: Make the parse state have two sets of gradient details.
       One for fills and another for strokes.  This stops an SVG such as

         <svg viewBox="0 0 100 100" version="1.1" xmlns="http://www.w3.org/2000/svg">
           <defs>
             <linearGradient id="foo">
               <stop stop-color="#69f" offset="0"/>
               <stop stop-color="#468" offset="1"/>
             </linearGradient>
           </defs>
           <path fill="url(#foo)" stroke='url(#bar)' d='M10 10 H 90 V 90 H 10 Z' />
         </svg>

       from getting its fill gradient details trampled when we reset the
       gradient for the the missing bar gadient definition.  Note, we only
       handle linearGradient on the fill anyway.
  - Parse: Avoid strndup with unchecked return value.
  - Parse: Remove explicit init of gradient state; gets memset anyway.
  - add polyline test case with floating point colour percentages
  - SVG dictionary for use with AFL tool
  - Add test set derived from AFL
       Generated with AFL using custom dictionary then minimised with cmin
       and tmin tools to be the smallest test set possible

       The run used two thousand processor hours on a 24way xeon 2.3GHz system
  - prevent division by zero for gradient with no points and add test
  - improve test suite runner
  - add crash test generated with AFL
  - cope with lack of root svg element
  - add file output to test decoder

 -- Daniel Silverstone <dsilvers@digital-scurf.org>  Sat, 19 Nov 2016 09:41:47 +0000

libsvgtiny (0.1.4) stable; urgency=medium

  - Fix build with certain C libraries.
  - enable decode tests for svg files
       These svg files have caused the library to crash and to render poorly.
  - Fix reallocation of path buffer length to cope with differng path lengths
  - Update CFLAGS to avoid deprication warning for glibc 2.21 and later.
  - Fix paths for Haiku.

 -- Vincent Sanders <vince@kyllikki.org>  Sun, Jan 3 2016 11:57:27 +0000

libsvgtiny (0.1.3) stable; urgency=medium

  - Ensure path generation does not overrun allocated storage.
       This fixes bug #2251 which was caused by the svg:

       <svg width="11" height="11" id="support-entry-icon"
       y="3389"><g><g><path fill-rule="evenodd" clip-rule="evenodd"
       fill="#D6D6D6" d="M0,0v11h11V0H0z M10,10H1V1h9V10z M9,3H2v1h7V3z
       M9,5H2v1h7V5z M9,7H2v1h7V7z"/></g></g></svg>

       The svg was causing more path elements to be generated in the internal
       representation than space was allocated for and overrunning heap
       blocks.

       The path element parsing was using a fixed size allocation for the
       path elements and never bounds checked. Further it did not cope with
       zero length paths (which the spec says are permitted). It was also
       grossly overallocating for the common case.

       This changes the path element array to be bounds checked and then
       extended if required, the initial allocation is generally sufficient
       and in testing very few resizes occurred.

       The reallocation strategy grows the element storage by 2.5 each time
       this means even in the degenerate case very few reallocations are
       required. In testing no more than a single reallocation has been
       observed.

       The final path element array will always be reallocted to the minimum
       required size. This reduces overall memory usage which is useful with
       complex scenes.
  - Update README to cover dependancies and core buildsystem
       Fix various issues with the test target and update the documentation
       to be more correct.
  - Fix up for new buildsystem
  - fix parsing of whitespace in transform operators
       The SVG spec for the transform attribute allows whitespace in places
       that were causing the %n specifier in the ssanf to return 0 as the
       match failed before it completed the parse.

       http://www.w3.org/TR/SVG/coords.html#TransformAttribute
  - Fix relative move commands following a path close.
       Both 'M' and 'm' are moves and therefore start a new (sub)path. In
       either case the location should be cached so that a later 'close path'
       (z or Z) knows the location it is returning to. The location is not
       written to 'p', since it is assumed that the client code remembers. If
       the next move is relative (lowercase), then it's important that last_x,
       last_y were correctly updated while processing Z/z.
  - Add test case image for broken behaviour of relative move.

 -- Vincent Sanders <vince@kyllikki.org>  Sun, Mar 8 2015 23:24:51 +0000

libsvgtiny (0.1.2) stable; urgency=medium

  - Hopefully silence warnings about inlines and non inlines calling one
       another.

 -- Vincent Sanders <vince@kyllikki.org>  Tue, 26 Aug 2014 07:44:29 -0700

libsvgtiny (0.1.1) stable; urgency=medium

  - Add support for multilib
  - Fix to use list_size accessor.
  - Minor tidyup.
  - Move gradient logging to svgtiny_gradient.c, and suppress when not debugging gradients.
  - Fix leak of gradient dom strings.
  - Suppress most gradient debug.

 -- Vincent Sanders <vince@kyllikki.org>  Fri, 18 Apr 2014 12:19:22 +0100

libsvgtiny (0.1.0) stable; urgency=medium

  Initial version

 -- Vincent Sanders <vince@kyllikki.org>  Fri, 19 Apr 2013 20:26:48 +0100
